#!/usr/bin/env ruby

$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib')))

require 'optparse'
require 'limgur'

limgur = Limgur.new '90b4d040607755992895fdd5bb586ba2'

stdout = $stdout
stderr = $stderr

options = {}
ARGV.unshift '-h' if ARGV.empty?
opts = OptionParser.new do |opts|
  opts.banner = 'Usage: limgur [options]'

  opts.on('-u', '--upload', 'Upload via image or URL') do
    options[:action] ||= :upload
  end

  opts.on('-d', '--delete', 'Delete an image via hash') do
    options[:action] ||= :delete
  end

  opts.on('-s', '--scrot', 'Take a screenshot then upload it') do
    options[:action] ||= :scrot
  end
  
  opts.on('-f FORMAT', '--format=FORMAT', 'Format of the output, with each letter being one line',
                                          "\tf  filename",
                                          "\tI  image hash",
                                          "\tD  delete hash",
                                          "\ti  image url",
                                          "\tl  large thumbnail",
                                          "\ts  small thumbnail",
                                          "\tr  imgur page",
                                          "\td  delete page",
                                          "\tS  status",
                                          "\tn  newline") do |val|
    options[:format] = val
  end
  
  opts.on('-o OPTION', '--output=OPTION', ['plaintext', 'titles', 'bbcode', 'html'],
          'Choose a method of presenting any URLs',
          "\tOne of: plaintext, titles, bbcode, html") do |val|
    options[:output] = val
  end
  
  opts.on('-q', '--quiet', "Don't write to stdout") do
    $stdout = File.new('/dev/null', 'w')
  end
  
  opts.on('-Q', '--really-quiet', "Don't write to stdout or stderr") do
    $stdout = File.new('/dev/null', 'w')
    $stderr = File.new('/dev/null', 'w')
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit 0
  end

  opts.on_tail('-v', '--version', 'Show version') do
    puts "limgur v#{Limgur.version}"
    puts "Copyright (c) 2009-2010 Danny Tatom <dannytatom@gmail.com>"
    puts "Copyright (c) 2010      James Pearson <xiong.chiamiov@gmail.com>"
    puts "Licensed under the MIT"
    exit 0
  end
end.parse!

if options[:action] == :upload && ARGV.empty?
  warn 'Missing image to upload'
end

if options[:action] == :delete && ARGV.empty?
  warn 'Missing delete hash'
end

case options[:action]
  when :upload
    ARGV.each do |arg|
      puts limgur.upload arg, options
    end
  when :delete
    ARGV.each do |arg|
      puts limgur.delete arg
    end
  when :scrot
    ARGV.each do |arg|
      puts limgur.scrot arg
    end
end

$stdout = stdout
$stderr = stderr
